import streamlit as st
import pandas as pd
import plotly.express as px
from overview_parameters import filter_string, create_widgets, filter_df

# Load data
file_path = 'data_dv.csv'  # Replace with your uploaded file path
data = pd.read_csv(file_path)

# Page configuration
st.set_page_config(page_title="Overview", layout="wide")

# T√πy ch·ªânh CSS ƒë·ªÉ ƒë·∫©y Markdown s√°t tr√™n c√πng
st.markdown(
    """
    <style>
        .block-container {
            padding-top: 2rem; /* Lo·∫°i b·ªè kho·∫£ng c√°ch ph√≠a tr√™n */
        }
        h1 {
            text-align: center;
            margin-top: 0;
            padding-top: 0;
        }
    </style>
    """,
    unsafe_allow_html=True
)
st.markdown("<h3 style='text-align: center;'>T·ªïng quan v·ªÅ tai n·∫°n giao th√¥ng</h3>", unsafe_allow_html=True)

###########################################
st.sidebar.title("Control Panel")

# Nh·∫≠p ng√†y
with st.sidebar.container():
    col1, col2 = st.sidebar.columns(2)
    from_date_input = col1.date_input("Ng√†y b·∫Øt ƒë·∫ßu", value="2020-01-01", min_value="2020-01-01", max_value="2021-12-31")
    to_date_input = col2.date_input("Ng√†y k·∫øt th√∫c", value="2021-12-31", min_value="2020-01-01", max_value="2021-12-31")

district_input = st.sidebar.multiselect("Qu·∫≠n/Huy·ªán", options=data['Qu·∫≠n/Huy·ªán'].unique())
road_type_input = st.sidebar.multiselect("Lo·∫°i ƒë∆∞·ªùng", options=data['Lo·∫°i ƒë∆∞·ªùng'].unique())
weather_type_input = st.sidebar.multiselect("T√¨nh tr·∫°ng th·ªùi ti·∫øt", options=data['T√¨nh tr·∫°ng th·ªùi ti·∫øt'].unique())

# Convert 'Ng√†y x·∫£y ra tai n·∫°n' to datetime if it's not already
data['Ng√†y x·∫£y ra tai n·∫°n'] = pd.to_datetime(data['Ng√†y x·∫£y ra tai n·∫°n'], errors='coerce')

# Convert date inputs to datetime64[ns]
from_date_input = pd.to_datetime(from_date_input)
to_date_input = pd.to_datetime(to_date_input)

# Filtering function
def filter_df(df, from_date, to_date, district, road_type, weather_type):
    # Ensure 'Ng√†y x·∫£y ra tai n·∫°n' is in datetime format
    df['Ng√†y x·∫£y ra tai n·∫°n'] = pd.to_datetime(df['Ng√†y x·∫£y ra tai n·∫°n'], errors='coerce')
    
    # Filter by date range
    df_filtered = df[(df['Ng√†y x·∫£y ra tai n·∫°n'] >= from_date) & (df['Ng√†y x·∫£y ra tai n·∫°n'] <= to_date)]
    
    # Filter by selected districts
    if district:
        df_filtered = df_filtered[df_filtered['Qu·∫≠n/Huy·ªán'].isin(district)]
    
    # Filter by selected road types
    if road_type:
        df_filtered = df_filtered[df_filtered['Lo·∫°i ƒë∆∞·ªùng'].isin(road_type)]
    
    # Filter by selected weather conditions
    if weather_type:
        df_filtered = df_filtered[df_filtered['T√¨nh tr·∫°ng th·ªùi ti·∫øt'].isin(weather_type)]
    
    return df_filtered

# Apply the filtering based on user input from the sidebar
filtered_df = filter_df(data, from_date_input, to_date_input, district_input, road_type_input, weather_type_input)

#############################################


with st.container():
    col1, col2, col3 = st.columns(3)

    number_of_unique_district = len(filtered_df['Qu·∫≠n/Huy·ªán'].unique())
    number_of_accident = filtered_df.shape[0]
    number_of_dead = filtered_df['S·ªë ng∆∞·ªùi ch·∫øt'].sum()

    col1.markdown(
        f"""
        <div style="
            background-color: #FF6363;
            border-radius: 10px;
            text-align: center;">
            <span>S·ªë Qu·∫≠n/Huy·ªán</span>
            <p style="font-size: 25px; font-weight: bold;">{number_of_unique_district}</p>
        </div>
        """,
        unsafe_allow_html=True
    )

    col2.markdown(
        f"""
        <div style="
            background-color: #FFB001;
            border-radius: 10px;
            text-align: center;">
            <span>S·ªë Ng∆∞·ªùi Ch·∫øt</span>
            <p style="font-size: 25px; font-weight: bold;">{number_of_dead}</p>
        </div>
        """,
        unsafe_allow_html=True
    )

    col3.markdown(
        f"""
        <div style="
            background-color: #FFB001;
            border-radius: 10px;
            text-align: center;">
            <span>S·ªë V·ª• Tai N·∫°n</span>
            <p style="font-size: 25px; font-weight: bold;">{number_of_accident}</p>
        </div>
        """,
        unsafe_allow_html=True
    )
    # col1.metric("S·ªë Qu·∫≠n/Huy·ªán", number_of_unique_district, border=True)
    # col2.metric("S·ªë ng∆∞·ªùi ch·∫øt", number_of_dead, border=True)
    # col3.metric("S·ªë ng∆∞·ªùi v·ª• tai n·∫°n", number_of_accident, border=True)

with st.container(border=False):
    chart_col1, chart_col2 = st.columns(2)
    ######################################################
    with chart_col1.container(border=True):
        # Chuy·ªÉn ƒë·ªïi ng√†y v·ªõi ƒë·ªãnh d·∫°ng ph√π h·ª£p
        filtered_df['Ng√†y x·∫£y ra tai n·∫°n'] = pd.to_datetime(filtered_df['Ng√†y x·∫£y ra tai n·∫°n'], format='%d/%m/%Y', errors='coerce')

        # Lo·∫°i b·ªè c√°c gi√° tr·ªã kh√¥ng h·ª£p l·ªá (NaT)
        filtered_df = filtered_df.dropna(subset=['Ng√†y x·∫£y ra tai n·∫°n'])

        # Tr√≠ch xu·∫•t th√°ng t·ª´ c·ªôt 'Ng√†y x·∫£y ra tai n·∫°n'
        filtered_df['Th√°ng'] = filtered_df['Ng√†y x·∫£y ra tai n·∫°n'].dt.month

        # ƒê·∫øm s·ªë v·ª• tai n·∫°n theo t·ª´ng th√°ng
        monthly_accidents = filtered_df['Th√°ng'].value_counts().sort_index().reset_index()
        monthly_accidents.columns = ['Th√°ng', 'S·ªë v·ª•']

        # V·∫Ω bi·ªÉu ƒë·ªì mi·ªÅn
        fig = px.area(
            monthly_accidents,
            x='Th√°ng',
            y='S·ªë v·ª•',
            title='Xu h∆∞·ªõng s·ªë v·ª• tai n·∫°n theo t·ª´ng th√°ng',
            # title=' ',
            labels={'Th√°ng': 'Th√°ng trong nƒÉm', 'S·ªë v·ª•': 'S·ªë v·ª• tai n·∫°n'},
            color_discrete_sequence=['#636EFA']  # M√†u bi·ªÉu ƒë·ªì
        )

        # T√πy ch·ªânh hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
        fig.update_layout(
            margin=dict(l=0, r=0, t=0, b=0),
            title_x=0.5,
            title_y=0.9,
            title_pad=dict(t=5),
            # xaxis=dict(tickmode='linear', dtick=1, title_font=dict(size=14, color='black')),
            # yaxis=dict(title_font=dict(size=14, color='black')),
            # xaxis_title='Th√°ng trong nƒÉm',
            # yaxis_title='S·ªë v·ª• tai n·∫°n',
            # font=dict(size=12),
            # # width=900,
            # height=300
            xaxis=dict(
                tickmode='linear',
                dtick=1,
                title='Th√°ng trong nƒÉm',
                title_font=dict(size=14, color='black'),  # B√¥i ƒëen nh√£n tr·ª•c X
                tickfont=dict(size=12, color='black')
            ),
            yaxis=dict(
                title='S·ªë v·ª• tai n·∫°n',
                title_font=dict(size=14, color='black'),  # B√¥i ƒëen nh√£n tr·ª•c Y
                tickfont=dict(size=12, color='black')
            ),
            font=dict(size=12),
            height=300
        )

        # Hi·ªÉn th·ªã tr√™n Streamlit
        st.markdown("**üìä Xu h∆∞·ªõng s·ªë v·ª• tai n·∫°n theo t·ª´ng th√°ng**")
        st.plotly_chart(fig, use_container_width=True)
    ######################################################
    with chart_col2.container(border=True):
        # Chuy·ªÉn ƒë·ªïi ng√†y v·ªõi ƒë·ªãnh d·∫°ng ph√π h·ª£p
        filtered_df['Ng√†y x·∫£y ra tai n·∫°n'] = pd.to_datetime(filtered_df['Ng√†y x·∫£y ra tai n·∫°n'], format='%d/%m/%Y', errors='coerce')

        # Lo·∫°i b·ªè c√°c gi√° tr·ªã kh√¥ng h·ª£p l·ªá (NaT)
        filtered_df = filtered_df.dropna(subset=['Ng√†y x·∫£y ra tai n·∫°n'])

        # Tr√≠ch xu·∫•t ng√†y t·ª´ c·ªôt 'Ng√†y x·∫£y ra tai n·∫°n'
        filtered_df['Ng√†y'] = filtered_df['Ng√†y x·∫£y ra tai n·∫°n'].dt.day

        # ƒê·∫øm s·ªë v·ª• tai n·∫°n theo t·ª´ng ng√†y trong th√°ng
        daily_accidents = filtered_df['Ng√†y'].value_counts().sort_index().reset_index()
        daily_accidents.columns = ['Ng√†y', 'S·ªë v·ª•']

        # V·∫Ω bi·ªÉu ƒë·ªì xu h∆∞·ªõng s·ªë v·ª• tai n·∫°n theo ng√†y trong th√°ng
        fig_daily = px.line(
            daily_accidents,
            x='Ng√†y',
            y='S·ªë v·ª•',
            title='Xu h∆∞·ªõng s·ªë v·ª• tai n·∫°n theo ng√†y trong th√°ng',
            # title=' ',
            labels={'Ng√†y': 'Ng√†y', 'S·ªë v·ª•': 'S·ªë v·ª• tai n·∫°n'},
            markers=True
        )

        # T√πy ch·ªânh hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
        fig_daily.update_layout(
            margin=dict(l=0, r=0, t=0, b=0),
            title_x=0.5,  # CƒÉn gi·ªØa ti√™u ƒë·ªÅ
            title_y=0.9,  # ƒê∆∞a ti√™u ƒë·ªÅ l√™n g·∫ßn bi·ªÉu ƒë·ªì h∆°n
            # xaxis=dict(tickmode='linear', dtick=1),  # Hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß c√°c ng√†y
            # xaxis_title='Ng√†y',
            # yaxis_title='S·ªë v·ª• tai n·∫°n',
            # # width=900,  # ƒê·ªô r·ªông bi·ªÉu ƒë·ªì
            # height=300,  # Chi·ªÅu cao bi·ªÉu ƒë·ªì
            # font=dict(size=12)  # K√≠ch th∆∞·ªõc font ch·ªØ
            xaxis=dict(
                tickmode='linear',
                dtick=1,
                title='Ng√†y',
                title_font=dict(size=14, color='black'),  # B√¥i ƒëen nh√£n tr·ª•c X
                tickfont=dict(size=12, color='black')
            ),
            yaxis=dict(
                title='S·ªë v·ª• tai n·∫°n',
                title_font=dict(size=14, color='black'),  # B√¥i ƒëen nh√£n tr·ª•c Y
                tickfont=dict(size=12, color='black')
            ),
            font=dict(size=12),
            height=300
        )

        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
        st.markdown("**üìä Xu h∆∞·ªõng s·ªë v·ª• tai n·∫°n theo ng√†y trong th√°ng**")
        st.plotly_chart(fig_daily, use_container_width=True)
    ######################################################

with st.container(border=False):
    chart_col1, chart_col2 = st.columns(2)
    ######################################################
    with chart_col1.container(border=True):
        # Chuy·ªÉn ƒë·ªïi 'Th·ªùi gian x·∫£y ra tai n·∫°n' sang datetime v√† tr√≠ch xu·∫•t gi·ªù
        filtered_df['Gi·ªù'] = pd.to_datetime(filtered_df['Th·ªùi gian x·∫£y ra tai n·∫°n'], format='%H:%M:%S', errors='coerce').dt.hour

        # ƒê·∫øm s·ªë v·ª• tai n·∫°n theo t·ª´ng gi·ªù
        hourly_accidents = filtered_df['Gi·ªù'].value_counts().sort_index().reset_index()
        hourly_accidents.columns = ['Gi·ªù', 'S·ªë v·ª•']

        # V·∫Ω bi·ªÉu ƒë·ªì s·ªë v·ª• tai n·∫°n theo khung gi·ªù
        fig_hourly = px.bar(
            hourly_accidents,
            x='Gi·ªù',
            y='S·ªë v·ª•',
            title='S·ªë v·ª• tai n·∫°n theo khung gi·ªù',
            # title=' ',
            text='S·ªë v·ª•',
            color='S·ªë v·ª•',
            color_continuous_scale='Plasma'  # Thang m√†u Plasma
        )

        # T√πy ch·ªânh hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
        fig_hourly.update_traces(textposition='outside')
        fig_hourly.update_layout(
            margin=dict(l=0, r=0, t=0, b=0),
            title_x=0.5,  # CƒÉn gi·ªØa ti√™u ƒë·ªÅ
            # xaxis_title='Gi·ªù trong ng√†y',
            # yaxis_title='S·ªë v·ª• tai n·∫°n',
            # xaxis=dict(tickmode='linear', dtick=1),  # Hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß gi·ªù
            # # width=900,  # ƒê·ªô r·ªông bi·ªÉu ƒë·ªì
            # height=300,  # Chi·ªÅu cao bi·ªÉu ƒë·ªì
            # font=dict(size=12)  # K√≠ch th∆∞·ªõc font ch·ªØ
            xaxis=dict(
                tickmode='linear',
                dtick=1,
                title='Gi·ªù trong ng√†y',
                title_font=dict(size=14, color='black'),  # B√¥i ƒëen nh√£n tr·ª•c X
                tickfont=dict(size=12, color='black')
            ),
            yaxis=dict(
                title='S·ªë v·ª• tai n·∫°n',
                title_font=dict(size=14, color='black'),  # B√¥i ƒëen nh√£n tr·ª•c Y
                tickfont=dict(size=12, color='black')
            ),
            font=dict(size=12),
            height=300
        )

        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
        st.markdown("**üìä S·ªë v·ª• tai n·∫°n theo khung gi·ªù**")
        st.plotly_chart(fig_hourly, use_container_width=True)
    ######################################################
    with chart_col2.container(border=True):
        # ƒê·∫øm s·ªë v·ª• tai n·∫°n theo t·ª´ng qu·∫≠n/huy·ªán v√† l·∫•y top 10
        district_accidents = (
            filtered_df['Qu·∫≠n/Huy·ªán']
            .value_counts()
            .head(10)
            .reset_index()
            .rename(columns={'Qu·∫≠n/Huy·ªán': 'Qu·∫≠n/Huy·ªán', 'S·ªë v·ª•': 'S·ªë v·ª• tai n·∫°n'})
        )

        district_accidents['index'] = district_accidents['index'].astype(str) + ' <span style="color:white;">a</span>'

        # S·∫Øp x·∫øp tƒÉng d·∫ßn theo s·ªë v·ª• tai n·∫°n
        district_accidents = district_accidents.sort_values(by='Qu·∫≠n/Huy·ªán', ascending=True)

        # V·∫Ω bi·ªÉu ƒë·ªì Horizontal Bar Chart
        fig_district = px.bar(
            district_accidents,
            x='Qu·∫≠n/Huy·ªán',
            y='index',
            orientation='h',  # Bi·ªÉu ƒë·ªì ngang
            title='üìä Top 10 qu·∫≠n/huy·ªán c√≥ s·ªë v·ª• tai n·∫°n cao nh·∫•t (S·∫Øp x·∫øp tƒÉng d·∫ßn)',
            # title=' ',
            labels={'Qu·∫≠n/Huy·ªán': 'Qu·∫≠n/Huy·ªán', 'index': 'index'},
            color='Qu·∫≠n/Huy·ªán',
            color_continuous_scale='Viridis'  # Thang m√†u Viridis
        )

        # T√πy ch·ªânh hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
        fig_district.update_layout(
            margin=dict(l=0, r=0, t=5, b=0),
            title_x=0.5,  # CƒÉn gi·ªØa ti√™u ƒë·ªÅ
            # xaxis_title='S·ªë v·ª• tai n·∫°n',
            # yaxis_title='Qu·∫≠n/Huy·ªán',
            # # width=900,  # ƒê·ªô r·ªông bi·ªÉu ƒë·ªì
            # height=300,  # Chi·ªÅu cao bi·ªÉu ƒë·ªì
            # font=dict(size=12)  # K√≠ch th∆∞·ªõc font ch·ªØ
            xaxis=dict(
                tickmode='linear',
                dtick=100,
                title='S·ªë v·ª• tai n·∫°n',
                title_font=dict(size=14, color='black'),  # B√¥i ƒëen nh√£n tr·ª•c X
                tickfont=dict(size=12, color='black')
            ),
            yaxis=dict(
                title='Qu·∫≠n/Huy·ªán',
                title_font=dict(size=14, color='black'),  # B√¥i ƒëen nh√£n tr·ª•c Y
                tickfont=dict(size=12, color='black')
            ),
            font=dict(size=12),
            height=300
        )

        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
        # st.markdown("**üìä Top 10 Qu·∫≠n/Huy·ªán C√≥ S·ªë V·ª• Tai N·∫°n Cao Nh·∫•t**")
        st.plotly_chart(fig_district, use_container_width=True)

