import streamlit as st
import pandas as pd
import plotly.express as px
from overview_parameters import filter_string, create_widgets, filter_df
import ast

# Load data
file_path = 'data_dv.csv'  # Replace with your uploaded file path
data = pd.read_csv(file_path)

# Page configuration
st.set_page_config(page_title="Damage and Impact", layout="wide")

# T√πy ch·ªânh CSS ƒë·ªÉ ƒë·∫©y Markdown s√°t tr√™n c√πng
st.markdown(
    """
    <style>
        .block-container {
            padding-top: 2rem; /* Lo·∫°i b·ªè kho·∫£ng c√°ch ph√≠a tr√™n */
        }
        h1 {
            text-align: center;
            margin-top: 0;
            padding-top: 0;
        }
    </style>
    """,
    unsafe_allow_html=True
)
st.markdown("<h3 style='text-align: center;'>Thi·ªát h·∫°i v√† t√°c ƒë·ªông</h3>", unsafe_allow_html=True)

###########################################

st.sidebar.title("B·ªô l·ªçc")

# Nh·∫≠p gi
district_input = st.sidebar.multiselect("Qu·∫≠n/Huy·ªán", options=data['Qu·∫≠n/Huy·ªán'].unique())
road_type_input = st.sidebar.multiselect("Lo·∫°i ƒë∆∞·ªùng", options=data['Lo·∫°i ƒë∆∞·ªùng'].unique())
weather_type_input = st.sidebar.multiselect("T√¨nh tr·∫°ng th·ªùi ti·∫øt", options=data['T√¨nh tr·∫°ng th·ªùi ti·∫øt'].unique())

# Filtering function
def filter_df(df, district_input, road_type_input, weather_type_input):
    
    # Filter by selected districts
    if district_input:
        df = df[df['Qu·∫≠n/Huy·ªán'].isin(district_input)]
    
    # Filter by selected road types
    if road_type_input:
        df = df[df['Lo·∫°i ƒë∆∞·ªùng'].isin(road_type_input)]
    
    # Filter by selected weather conditions
    if weather_type_input:
        df = df[df['T√¨nh tr·∫°ng th·ªùi ti·∫øt'].isin(weather_type_input)]
    
    return df

# Apply the filtering based on user input from the sidebar
filtered_df = filter_df(data, district_input, road_type_input, weather_type_input)

#############################################


with st.container():
    col1, col2, col3 = st.columns(3)

    number_of_unique_district = len(filtered_df['Qu·∫≠n/Huy·ªán'].unique())
    number_of_accident = filtered_df.shape[0]
    number_of_dead = filtered_df['S·ªë ng∆∞·ªùi ch·∫øt'].sum()

    col1.markdown(
        f"""
        <div style="
            background-color: #FF6363;
            border-radius: 10px;
            text-align: center;">
            <span>S·ªë Qu·∫≠n/Huy·ªán</span>
            <p style="font-size: 25px; font-weight: bold;">{number_of_unique_district}</p>
        </div>
        """,
        unsafe_allow_html=True
    )

    col2.markdown(
        f"""
        <div style="
            background-color: #FFB001;
            border-radius: 10px;
            text-align: center;">
            <span>S·ªë Ng∆∞·ªùi Ch·∫øt</span>
            <p style="font-size: 25px; font-weight: bold;">{number_of_dead}</p>
        </div>
        """,
        unsafe_allow_html=True
    )

    col3.markdown(
        f"""
        <div style="
            background-color: #FFB001;
            border-radius: 10px;
            text-align: center;">
            <span>S·ªë V·ª• Tai N·∫°n</span>
            <p style="font-size: 25px; font-weight: bold;">{number_of_accident}</p>
        </div>
        """,
        unsafe_allow_html=True
    )
    # col1.metric("S·ªë Qu·∫≠n/Huy·ªán", number_of_unique_district, border=True)
    # col2.metric("S·ªë ng∆∞·ªùi ch·∫øt", number_of_dead, border=True)
    # col3.metric("S·ªë ng∆∞·ªùi v·ª• tai n·∫°n", number_of_accident, border=True)

chart_col1, chart_col2 = st.columns(2)
with chart_col1.container():
    with st.container(border=True):
        
        # Chu·∫©n b·ªã d·ªØ li·ªáu
        # Lo·∫°i b·ªè c√°c h√†ng c√≥ gi√° tr·ªã thi·∫øu trong 'Qu·∫≠n/Huy·ªán', 'S·ªë ng∆∞·ªùi ch·∫øt', v√† 'S·ªë ng∆∞·ªùi b·ªã th∆∞∆°ng'
        stacked_data = filtered_df.dropna(subset=['Qu·∫≠n/Huy·ªán', 'S·ªë ng∆∞·ªùi ch·∫øt', 'S·ªë ng∆∞·ªùi b·ªã th∆∞∆°ng'])
        stacked_data['Qu·∫≠n/Huy·ªán'] = stacked_data['Qu·∫≠n/Huy·ªán'].astype(str) + ' <span style="color:white;">a</span>'


        # Nh√≥m d·ªØ li·ªáu theo 'Qu·∫≠n/Huy·ªán' v√† t√≠nh t·ªïng s·ªë ng∆∞·ªùi ch·∫øt v√† b·ªã th∆∞∆°ng
        stacked_summary = stacked_data.groupby('Qu·∫≠n/Huy·ªán').agg(
            {'S·ªë ng∆∞·ªùi ch·∫øt': 'sum', 'S·ªë ng∆∞·ªùi b·ªã th∆∞∆°ng': 'sum'}
        ).reset_index()

        # Chuy·ªÉn d·ªØ li·ªáu sang ƒë·ªãnh d·∫°ng ph√π h·ª£p cho Stacked Bar Chart
        stacked_melted = stacked_summary.melt(
            id_vars='Qu·∫≠n/Huy·ªán',
            value_vars=['S·ªë ng∆∞·ªùi ch·∫øt', 'S·ªë ng∆∞·ªùi b·ªã th∆∞∆°ng'],
            var_name='Lo·∫°i th·ªëng k√™',
            value_name='S·ªë l∆∞·ª£ng'
        )

        # V·∫Ω bi·ªÉu ƒë·ªì Stacked Bar Chart v·ªõi b·∫£ng m√†u ph√¢n bi·ªát
        fig = px.bar(
            stacked_melted,
            x='Qu·∫≠n/Huy·ªán',
            y='S·ªë l∆∞·ª£ng',
            color='Lo·∫°i th·ªëng k√™',
            title='üìä S·ªë ng∆∞·ªùi ch·∫øt v√† b·ªã th∆∞∆°ng theo qu·∫≠n/huy·ªán',
            # title=' ',
            labels={'S·ªë l∆∞·ª£ng': 'S·ªë ng∆∞·ªùi', 'Qu·∫≠n/Huy·ªán': 'Qu·∫≠n/Huy·ªán', 'Lo·∫°i th·ªëng k√™': 'Lo·∫°i th·ªëng k√™'},
            # color_discrete_sequence=px.colors.qualitative.Set2  # S·ª≠ d·ª•ng b·∫£ng m√†u Set1
            color_discrete_sequence=px.colors.qualitative.D3
        )

        # T√πy ch·ªânh hi·ªÉn th·ªã
        fig.update_layout(
            margin=dict(l=0, r=0, t=70, b=0),
            title_x=0.5,  # CƒÉn gi·ªØa ti√™u ƒë·ªÅ
            # xaxis_title='Qu·∫≠n/Huy·ªán',
            # yaxis_title='S·ªë ng∆∞·ªùi',
            barmode='stack',  # Bi·ªÉu ƒë·ªì d·∫°ng stacked
            font=dict(size=12),  # K√≠ch th∆∞·ªõc font ch·ªØ
            height=300,  # Chi·ªÅu cao bi·ªÉu ƒë·ªì
            # width=1000,  # ƒê·ªô r·ªông bi·ªÉu ƒë·ªì
            # xaxis=dict(tickangle=45),  # Xoay nh√£n tr·ª•c X n·∫øu c·∫ßn
            xaxis=dict(
                tickangle=45,
                title='Qu·∫≠n/Huy·ªán',
                title_font=dict(size=14, color='black'),  # B√¥i ƒëen nh√£n tr·ª•c X
                tickfont=dict(size=12, color='black')
            ),
            yaxis=dict(
                title='S·ªë ng∆∞·ªùi',
                title_font=dict(size=14, color='black'),  # B√¥i ƒëen nh√£n tr·ª•c Y
                tickfont=dict(size=12, color='black')
            ),
            title=dict(
                x=0,  # Di chuy·ªÉn ti√™u ƒë·ªÅ sang b√™n tr√°i
                xanchor='left',  # CƒÉn ch·ªânh ti√™u ƒë·ªÅ v·ªõi ph√≠a b√™n tr√°i
                yanchor='top'  # CƒÉn ch·ªânh theo chi·ªÅu d·ªçc ·ªü ph√≠a tr√™n
            ),
        )
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
        # st.markdown("**üìä S·ªë ng∆∞·ªùi ch·∫øt v√† b·ªã th∆∞∆°ng theo qu·∫≠n/huy·ªán**")
        st.plotly_chart(fig, use_container_width=True)


    ############################################################
    with st.container(border=True):

        # Chu·∫©n b·ªã d·ªØ li·ªáu
        # G·ªôp d·ªØ li·ªáu t·ª´ Nh√≥m PT1 v√† Nh√≥m PT2 th√†nh m·ªôt c·ªôt 'Lo·∫°i ph∆∞∆°ng ti·ªán'
        vehicle_data = pd.concat([
            filtered_df[['Nh√≥m PT1', 'S·ªë ng∆∞·ªùi ch·∫øt', 'S·ªë ng∆∞·ªùi b·ªã th∆∞∆°ng']].rename(columns={'Nh√≥m PT1': 'Lo·∫°i ph∆∞∆°ng ti·ªán'}),
            filtered_df[['Nh√≥m PT2', 'S·ªë ng∆∞·ªùi ch·∫øt', 'S·ªë ng∆∞·ªùi b·ªã th∆∞∆°ng']].rename(columns={'Nh√≥m PT2': 'Lo·∫°i ph∆∞∆°ng ti·ªán'})
        ])

        # Lo·∫°i b·ªè c√°c h√†ng thi·∫øu d·ªØ li·ªáu
        vehicle_data = vehicle_data.dropna(subset=['Lo·∫°i ph∆∞∆°ng ti·ªán', 'S·ªë ng∆∞·ªùi ch·∫øt', 'S·ªë ng∆∞·ªùi b·ªã th∆∞∆°ng'])

        # T√≠nh t·ªïng s·ªë ng∆∞·ªùi ch·∫øt v√† b·ªã th∆∞∆°ng theo lo·∫°i ph∆∞∆°ng ti·ªán
        vehicle_summary = vehicle_data.groupby('Lo·∫°i ph∆∞∆°ng ti·ªán').agg(
            S·ªë_ng∆∞·ªùi_ch·∫øt=('S·ªë ng∆∞·ªùi ch·∫øt', 'sum'),
            S·ªë_ng∆∞·ªùi_b·ªã_th∆∞∆°ng=('S·ªë ng∆∞·ªùi b·ªã th∆∞∆°ng', 'sum')
        ).reset_index()

        # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu sang ƒë·ªãnh d·∫°ng ph√π h·ª£p cho Stacked Bar Chart
        vehicle_melted = vehicle_summary.melt(
            id_vars='Lo·∫°i ph∆∞∆°ng ti·ªán',
            value_vars=['S·ªë_ng∆∞·ªùi_ch·∫øt', 'S·ªë_ng∆∞·ªùi_b·ªã_th∆∞∆°ng'],
            var_name='Lo·∫°i th·ªëng k√™',
            value_name='S·ªë l∆∞·ª£ng'
        )

        # V·∫Ω bi·ªÉu ƒë·ªì Stacked Bar Chart
        fig_stacked_bar = px.bar(
            vehicle_melted,
            x='Lo·∫°i ph∆∞∆°ng ti·ªán',
            y='S·ªë l∆∞·ª£ng',
            color='Lo·∫°i th·ªëng k√™',
            title='üìä S·ªë ng∆∞·ªùi ch·∫øt v√† b·ªã th∆∞∆°ng theo lo·∫°i ph∆∞∆°ng ti·ªán',
            # title=' ',
            labels={
                'Lo·∫°i ph∆∞∆°ng ti·ªán': 'Lo·∫°i ph∆∞∆°ng ti·ªán',
                'S·ªë l∆∞·ª£ng': 'S·ªë ng∆∞·ªùi',
                'Lo·∫°i th·ªëng k√™': 'Lo·∫°i th·ªëng k√™'
            },
            barmode='stack',  # Bi·ªÉu ƒë·ªì d·∫°ng stacked
            # color_discrete_sequence=px.colors.qualitative.Set2  # B·∫£ng m√†u
            color_discrete_sequence=px.colors.qualitative.D3
        )

        # T√πy ch·ªânh hi·ªÉn th·ªã
        fig_stacked_bar.update_layout(
            margin=dict(l=0, r=0, t=70, b=0),
            title_x=0.5,  # CƒÉn gi·ªØa ti√™u ƒë·ªÅ
            # xaxis_title='Lo·∫°i ph∆∞∆°ng ti·ªán',
            # yaxis_title='S·ªë ng∆∞·ªùi',
            font=dict(size=12),  # K√≠ch th∆∞·ªõc font ch·ªØ
            height=300,  # Chi·ªÅu cao bi·ªÉu ƒë·ªì
            # width=900,  # ƒê·ªô r·ªông bi·ªÉu ƒë·ªì
            # xaxis=dict(tickangle=45),  # Xoay nh√£n tr·ª•c X n·∫øu c·∫ßn
            xaxis=dict(
                tickangle=45,
                title='Lo·∫°i ph∆∞∆°ng ti·ªán',
                title_font=dict(size=14, color='black'),  # B√¥i ƒëen nh√£n tr·ª•c X
                tickfont=dict(size=12, color='black')
            ),
            yaxis=dict(
                title='S·ªë ng∆∞·ªùi',
                title_font=dict(size=14, color='black'),  # B√¥i ƒëen nh√£n tr·ª•c Y
                tickfont=dict(size=12, color='black')
            ),
            title=dict(
                x=0,  # Di chuy·ªÉn ti√™u ƒë·ªÅ sang b√™n tr√°i
                xanchor='left',  # CƒÉn ch·ªânh ti√™u ƒë·ªÅ v·ªõi ph√≠a b√™n tr√°i
                yanchor='top'  # CƒÉn ch·ªânh theo chi·ªÅu d·ªçc ·ªü ph√≠a tr√™n
            ),
        )
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
        # st.markdown("**üìä S·ªë ng∆∞·ªùi ch·∫øt v√† b·ªã th∆∞∆°ng theo lo·∫°i ph∆∞∆°ng ti·ªán**")
        st.plotly_chart(fig_stacked_bar, use_container_width=True)


##########################################################
with chart_col2.container():
    with st.container(border=True):
        
        # Chu·∫©n b·ªã d·ªØ li·ªáu
        # T√≠nh t·ªïng s·ªë v·ª•, t·ªïng thi·ªát h·∫°i v√† thi·ªát h·∫°i trung b√¨nh m·ªói v·ª• theo qu·∫≠n/huy·ªán
        bubble_data = filtered_df.groupby('Qu·∫≠n/Huy·ªán').agg(
            T·ªïng_s·ªë_v·ª•=('Qu·∫≠n/Huy·ªán', 'size'),
            T·ªïng_thi·ªát_h·∫°i=('Thi·ªát h·∫°i ∆∞·ªõc t√≠nh (tri·ªáu ƒë·ªìng)', 'sum'),
            Thi·ªát_h·∫°i_trung_b√¨nh=('Thi·ªát h·∫°i ∆∞·ªõc t√≠nh (tri·ªáu ƒë·ªìng)', 'mean')
        ).reset_index()

        bubble_data['Qu·∫≠n/Huy·ªán'] = bubble_data['Qu·∫≠n/Huy·ªán'].astype(str) + ' <span style="color:white;">a</span>'
        bubble_data['T·ªïng_thi·ªát_h·∫°i'] = bubble_data['T·ªïng_thi·ªát_h·∫°i'].astype(float)

        # Lo·∫°i b·ªè c√°c gi√° tr·ªã NaN trong d·ªØ li·ªáu
        bubble_data = bubble_data.dropna(subset=['T·ªïng_thi·ªát_h·∫°i', 'Thi·ªát_h·∫°i_trung_b√¨nh'])

        # V·∫Ω bi·ªÉu ƒë·ªì Bubble Chart
        fig_bubble = px.scatter(
            bubble_data,
            x='T·ªïng_s·ªë_v·ª•',
            y='T·ªïng_thi·ªát_h·∫°i',
            size='Thi·ªát_h·∫°i_trung_b√¨nh',
            color='Qu·∫≠n/Huy·ªán',
            title='üìä Ph√¢n t√≠ch thi·ªát h·∫°i theo qu·∫≠n/huy·ªán',
            # title=' ',
            labels={
                'T·ªïng_s·ªë_v·ª•': 'S·ªë v·ª• tai n·∫°n',
                'T·ªïng_thi·ªát_h·∫°i': 'T·ªïng thi·ªát h·∫°i (tri·ªáu ƒë·ªìng)',
                'Thi·ªát_h·∫°i_trung_b√¨nh': 'Thi·ªát h·∫°i trung b√¨nh (tri·ªáu ƒë·ªìng)',
                'Qu·∫≠n/Huy·ªán': 'Qu·∫≠n/Huy·ªán'
            },
            size_max=60,  # K√≠ch th∆∞·ªõc l·ªõn nh·∫•t c·ªßa bong b√≥ng
            color_discrete_sequence=px.colors.sequential.Viridis  # Thang m√†u
        )

        # T√πy ch·ªânh hi·ªÉn th·ªã
        fig_bubble.update_layout(
            margin=dict(l=0, r=0, t=70, b=0),
            title_x=0.5,  # CƒÉn gi·ªØa ti√™u ƒë·ªÅ
            font=dict(size=12),  # K√≠ch th∆∞·ªõc font ch·ªØ
            height=300,  # Chi·ªÅu cao bi·ªÉu ƒë·ªì
            legend=dict(
                orientation='h',  # Horizontal orientation
                x=0.5,  # CƒÉn gi·ªØa legend
                xanchor='center',  # CƒÉn gi·ªØa legend
                y=-0.2,  # V·ªã tr√≠ c·ªßa legend (·ªü d∆∞·ªõi bi·ªÉu ƒë·ªì)
                yanchor='top',  # Ch·ªânh legend n·∫±m ·ªü ph√≠a tr√™n
                itemsizing='constant',  # ƒê·∫£m b·∫£o m·ªói m·ª•c c√≥ k√≠ch th∆∞·ªõc gi·ªëng nhau
                traceorder='normal',
                font=dict(size=10),
                title=dict(text='Qu·∫≠n/Huy·ªán', font=dict(size=12))
            ),
            title=dict(
                x=0,  # Di chuy·ªÉn ti√™u ƒë·ªÅ sang b√™n tr√°i
                xanchor='left',  # CƒÉn ch·ªânh ti√™u ƒë·ªÅ v·ªõi ph√≠a b√™n tr√°i
                yanchor='top'  # CƒÉn ch·ªânh theo chi·ªÅu d·ªçc ·ªü ph√≠a tr√™n
            ),
        )
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
        # st.markdown("**üìä Ph√¢n t√≠ch thi·ªát h·∫°i theo qu·∫≠n/huy·ªán**")
        st.plotly_chart(fig_bubble, use_container_width=True)

    ########################################################
    with st.container(border=True):
        
        # K·∫øt h·ª£p c·∫£ 'Nh√≥m PT1' v√† 'Nh√≥m PT2' th√†nh m·ªôt c·ªôt duy nh·∫•t
        vehicles_damage = pd.concat([
            filtered_df[['Nh√≥m PT1', 'Thi·ªát h·∫°i ∆∞·ªõc t√≠nh (tri·ªáu ƒë·ªìng)']].rename(columns={'Nh√≥m PT1': 'Lo·∫°i ph∆∞∆°ng ti·ªán'}),
            filtered_df[['Nh√≥m PT2', 'Thi·ªát h·∫°i ∆∞·ªõc t√≠nh (tri·ªáu ƒë·ªìng)']].rename(columns={'Nh√≥m PT2': 'Lo·∫°i ph∆∞∆°ng ti·ªán'})
        ])

        vehicles_damage = vehicles_damage[vehicles_damage['Thi·ªát h·∫°i ∆∞·ªõc t√≠nh (tri·ªáu ƒë·ªìng)'] <= 1000]

        # Lo·∫°i b·ªè c√°c h√†ng c√≥ NaN trong c·∫£ 'Lo·∫°i ph∆∞∆°ng ti·ªán' v√† 'Thi·ªát h·∫°i ∆∞·ªõc t√≠nh'
        vehicles_damage = vehicles_damage.dropna(subset=['Lo·∫°i ph∆∞∆°ng ti·ªán', 'Thi·ªát h·∫°i ∆∞·ªõc t√≠nh (tri·ªáu ƒë·ªìng)'])

        # T√≠nh thi·ªát h·∫°i trung b√¨nh cho t·ª´ng lo·∫°i ph∆∞∆°ng ti·ªán
        avg_damage_by_vehicle = vehicles_damage.groupby('Lo·∫°i ph∆∞∆°ng ti·ªán')['Thi·ªát h·∫°i ∆∞·ªõc t√≠nh (tri·ªáu ƒë·ªìng)'].mean().reset_index()
        avg_damage_by_vehicle.columns = ['Lo·∫°i ph∆∞∆°ng ti·ªán', 'Thi·ªát h·∫°i trung b√¨nh']

        # Ki·ªÉm tra gi√° tr·ªã trung gian
        print(avg_damage_by_vehicle)
        avg_damage_by_vehicle = avg_damage_by_vehicle.sort_values(by='Thi·ªát h·∫°i trung b√¨nh', ascending=True)

        # V·∫Ω bi·ªÉu ƒë·ªì thanh ngang
        fig = px.bar(
            avg_damage_by_vehicle,
            x='Thi·ªát h·∫°i trung b√¨nh',
            y='Lo·∫°i ph∆∞∆°ng ti·ªán',
            orientation='h',
            title='üìä Thi·ªát h·∫°i trung b√¨nh theo lo·∫°i ph∆∞∆°ng ti·ªán',
            # title=' ',
            color='Thi·ªát h·∫°i trung b√¨nh',
            color_continuous_scale='viridis',
            labels={'Thi·ªát h·∫°i trung b√¨nh': 'Thi·ªát h·∫°i trung b√¨nh (tri·ªáu ƒë·ªìng)', 'Lo·∫°i ph∆∞∆°ng ti·ªán': 'Lo·∫°i ph∆∞∆°ng ti·ªán'}
        )

        # T√πy ch·ªânh hi·ªÉn th·ªã
        fig.update_layout(
            margin=dict(l=0, r=0, t=70, b=0),
            title_x=0.5,
            # xaxis_title='Thi·ªát h·∫°i trung b√¨nh (tri·ªáu ƒë·ªìng)',
            # yaxis_title='Lo·∫°i ph∆∞∆°ng ti·ªán',
            font=dict(size=12),
            height=300,
            xaxis=dict(
                title='Thi·ªát h·∫°i trung b√¨nh (tri·ªáu ƒë·ªìng)',
                title_font=dict(size=14, color='black'),  # B√¥i ƒëen nh√£n tr·ª•c X
                tickfont=dict(size=12, color='black')
            ),
            yaxis=dict(
                title='Lo·∫°i ph∆∞∆°ng ti·ªán',
                title_font=dict(size=14, color='black'),  # B√¥i ƒëen nh√£n tr·ª•c Y
                tickfont=dict(size=12, color='black')
            ),
            title=dict(
                x=0,  # Di chuy·ªÉn ti√™u ƒë·ªÅ sang b√™n tr√°i
                xanchor='left',  # CƒÉn ch·ªânh ti√™u ƒë·ªÅ v·ªõi ph√≠a b√™n tr√°i
                yanchor='top'  # CƒÉn ch·ªânh theo chi·ªÅu d·ªçc ·ªü ph√≠a tr√™n
            ),
            # width=900
        )
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
        # st.markdown("**üìä Thi·ªát h·∫°i trung b√¨nh theo lo·∫°i ph∆∞∆°ng ti·ªán**")
        st.plotly_chart(fig, use_container_width=True)


    ######################################################