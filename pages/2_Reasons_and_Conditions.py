import streamlit as st
import pandas as pd
import plotly.express as px
from overview_parameters import filter_string, create_widgets, filter_df
import ast

# Load data
file_path = 'data_dv.csv'  # Replace with your uploaded file path
data = pd.read_csv(file_path)

# Page configuration
st.set_page_config(page_title="Reasons and Conditions", layout="wide")

# T√πy ch·ªânh CSS ƒë·ªÉ ƒë·∫©y Markdown s√°t tr√™n c√πng
st.markdown(
    """
    <style>
        .block-container {
            padding-top: 2rem; /* Lo·∫°i b·ªè kho·∫£ng c√°ch ph√≠a tr√™n */
        }
        h1 {
            text-align: center;
            margin-top: 0;
            padding-top: 0;
        }
    </style>
    """,
    unsafe_allow_html=True
)
st.markdown("<h3 style='text-align: center;'>Nguy√™n nh√¢n v√† ƒëi·ªÅu ki·ªán kh√°ch quan</h3>", unsafe_allow_html=True)

###########################################
st.sidebar.title("Control Panel")

# Nh·∫≠p ng√†y
with st.sidebar.container():
    col1, col2 = st.sidebar.columns(2)
    from_date_input = col1.date_input("Ng√†y b·∫Øt ƒë·∫ßu", value="2020-01-01", min_value="2020-01-01", max_value="2021-12-31")
    to_date_input = col2.date_input("Ng√†y k·∫øt th√∫c", value="2021-12-31", min_value="2020-01-01", max_value="2021-12-31")

district_input = st.sidebar.multiselect("Qu·∫≠n/Huy·ªán", options=data['Qu·∫≠n/Huy·ªán'].unique())
road_type_input = st.sidebar.multiselect("Lo·∫°i ƒë∆∞·ªùng", options=data['Lo·∫°i ƒë∆∞·ªùng'].unique())
weather_type_input = st.sidebar.multiselect("T√¨nh tr·∫°ng th·ªùi ti·∫øt", options=data['T√¨nh tr·∫°ng th·ªùi ti·∫øt'].unique())

# Convert 'Ng√†y x·∫£y ra tai n·∫°n' to datetime if it's not already
data['Ng√†y x·∫£y ra tai n·∫°n'] = pd.to_datetime(data['Ng√†y x·∫£y ra tai n·∫°n'], errors='coerce')

# Convert date inputs to datetime64[ns]
from_date_input = pd.to_datetime(from_date_input)
to_date_input = pd.to_datetime(to_date_input)

# Filtering function
def filter_df(df, from_date, to_date, district, road_type, weather_type):
    # Ensure 'Ng√†y x·∫£y ra tai n·∫°n' is in datetime format
    df['Ng√†y x·∫£y ra tai n·∫°n'] = pd.to_datetime(df['Ng√†y x·∫£y ra tai n·∫°n'], errors='coerce')
    
    # Filter by date range
    df_filtered = df[(df['Ng√†y x·∫£y ra tai n·∫°n'] >= from_date) & (df['Ng√†y x·∫£y ra tai n·∫°n'] <= to_date)]
    
    # Filter by selected districts
    if district:
        df_filtered = df_filtered[df_filtered['Qu·∫≠n/Huy·ªán'].isin(district)]
    
    # Filter by selected road types
    if road_type:
        df_filtered = df_filtered[df_filtered['Lo·∫°i ƒë∆∞·ªùng'].isin(road_type)]
    
    # Filter by selected weather conditions
    if weather_type:
        df_filtered = df_filtered[df_filtered['T√¨nh tr·∫°ng th·ªùi ti·∫øt'].isin(weather_type)]
    
    return df_filtered

# Apply the filtering based on user input from the sidebar
filtered_df = filter_df(data, from_date_input, to_date_input, district_input, road_type_input, weather_type_input)

#############################################


with st.container():
    col1, col2, col3 = st.columns(3)

    number_of_unique_district = len(filtered_df['Qu·∫≠n/Huy·ªán'].unique())
    number_of_accident = filtered_df.shape[0]
    number_of_dead = filtered_df['S·ªë ng∆∞·ªùi ch·∫øt'].sum()

    col1.markdown(
        f"""
        <div style="
            background-color: #FF6363;
            border-radius: 10px;
            text-align: center;">
            <span>S·ªë Qu·∫≠n/Huy·ªán</span>
            <p style="font-size: 25px; font-weight: bold;">{number_of_unique_district}</p>
        </div>
        """,
        unsafe_allow_html=True
    )

    col2.markdown(
        f"""
        <div style="
            background-color: #FFB001;
            border-radius: 10px;
            text-align: center;">
            <span>S·ªë Ng∆∞·ªùi Ch·∫øt</span>
            <p style="font-size: 25px; font-weight: bold;">{number_of_dead}</p>
        </div>
        """,
        unsafe_allow_html=True
    )

    col3.markdown(
        f"""
        <div style="
            background-color: #FFB001;
            border-radius: 10px;
            text-align: center;">
            <span>S·ªë V·ª• Tai N·∫°n</span>
            <p style="font-size: 25px; font-weight: bold;">{number_of_accident}</p>
        </div>
        """,
        unsafe_allow_html=True
    )
    # col1.metric("S·ªë Qu·∫≠n/Huy·ªán", number_of_unique_district, border=True)
    # col2.metric("S·ªë ng∆∞·ªùi ch·∫øt", number_of_dead, border=True)
    # col3.metric("S·ªë ng∆∞·ªùi v·ª• tai n·∫°n", number_of_accident, border=True)

chart_col1, chart_col2 = st.columns(2)
with chart_col1.container():
    with st.container(border=True):
        # Prepare filtered_df for the pie chart
        weather_condition_counts = filtered_df['T√¨nh tr·∫°ng th·ªùi ti·∫øt'].value_counts().reset_index()
        weather_condition_counts.columns = ['T√¨nh tr·∫°ng th·ªùi ti·∫øt', 'S·ªë v·ª•']

        # Plot the pie chart using Plotly
        fig = px.pie(
            weather_condition_counts, 
            values='S·ªë v·ª•', 
            names='T√¨nh tr·∫°ng th·ªùi ti·∫øt', 
            title=' ',
            color_discrete_sequence=px.colors.sequential.Viridis  # Changed to Viridis for better contrast
        )

        # Customize labels and layout
        fig.update_traces(
            textinfo='percent+label', 
            pull=[0.1 if value < 0.05 * weather_condition_counts['S·ªë v·ª•'].sum() else 0 for value in weather_condition_counts['S·ªë v·ª•']],
            textfont_size=12  # Adjust font size for better readability
        )
        fig.update_layout(
            margin=dict(l=0, r=0, t=0, b=0),
            title_x=0.5,  # Center the title
            legend_title="T√¨nh tr·∫°ng th·ªùi ti·∫øt",
            # width=900,  # Adjusted width for better visualization
            height=300,  # Adjusted height for better visualization
            font=dict(size=10),  # Set default font size
            # autosize=True
        )


        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
        st.markdown("**üìä T·ª∑ l·ªá tai n·∫°n d·ª±a tr√™n t√¨nh tr·∫°ng th·ªùi ti·∫øt**")
        st.plotly_chart(fig, use_container_width=True)
    ############################################################
    with st.container(border=True):
        # Extract individual causes from the 'Nguy√™n nh√¢n v√† L·ªói vi ph·∫°m' column
        data['Nguy√™n nh√¢n'] = data['Nguy√™n nh√¢n v√† L·ªói vi ph·∫°m'].apply(
            lambda x: ast.literal_eval(x) if isinstance(x, str) else []
        )

        # Explode the list of causes into separate rows
        exploded_causes = data.explode('Nguy√™n nh√¢n')

        # Filter for accidents with at least one death
        fatal_accidents = exploded_causes[exploded_causes['S·ªë ng∆∞·ªùi ch·∫øt'] >= 1]

        # Count the top 10 individual causes
        cause_counts = fatal_accidents['Nguy√™n nh√¢n'].value_counts().head(10).reset_index()
        cause_counts.columns = ['Nguy√™n nh√¢n', 'S·ªë v·ª•']

        # Abbreviate the top causes as NV1, NV2, ..., and create a mapping for the legend
        cause_counts['Abbreviation'] = ['NV' + str(i + 1) for i in range(len(cause_counts))]

        # Plot the data with Plotly
        fig = px.bar(
            cause_counts, 
            x='Abbreviation', 
            y='S·ªë v·ª•', 
            text='S·ªë v·ª•',
            color='S·ªë v·ª•', 
            title=' ',
            color_continuous_scale='Viridis',
            labels={'Abbreviation': 'Nguy√™n nh√¢n (R√∫t g·ªçn)', 'S·ªë v·ª•': 'S·ªë v·ª•'}
        )

        # Add full cause descriptions as hover data
        fig.update_traces(
            hovertemplate="Nguy√™n nh√¢n: %{customdata[0]}<br>S·ªë v·ª•: %{y}",
            customdata=cause_counts[['Nguy√™n nh√¢n']].values
        )

        # Add annotations for the legend
        annotations_text = "<br>".join([f"{row['Abbreviation']}: {row['Nguy√™n nh√¢n']}" for _, row in cause_counts.iterrows()])
        fig.add_annotation(
            text=annotations_text,
            xref="paper", yref="paper",
            x=1, y=1,  # Position the legend to the right of the chart
            showarrow=False,
            align="left",
            font=dict(size=12),
            bgcolor="rgba(255, 255, 255, 0.8)",  # Add background color
            bordercolor="black",
            borderwidth=1.5
        )

        fig.update_traces(textposition='outside')
        # Customize layout
        fig.update_layout(
            margin=dict(l=0, r=0, t=0, b=0),
            title_x=0.5,  # Center the title
            xaxis_title='Nguy√™n nh√¢n (R√∫t g·ªçn)',
            yaxis_title='S·ªë v·ª•',
            font=dict(size=12),  # Set default font size
            legend_title="Nguy√™n nh√¢n",
            # width=1000,  # Adjust width to make room for annotations
            # height=600  # Adjust height
            height=300,
        )

        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
        st.markdown("**üìä Top 10 Nguy√™n nh√¢n g√¢y tai n·∫°n c√≥ ng∆∞·ªùi ch·∫øt**")
        st.plotly_chart(fig, use_container_width=True)


