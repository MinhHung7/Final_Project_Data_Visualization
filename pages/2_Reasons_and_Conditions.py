import streamlit as st
import pandas as pd
import plotly.express as px
from overview_parameters import filter_string, create_widgets, filter_df
import ast

# Load data
file_path = 'data_dv.csv'  # Replace with your uploaded file path
data = pd.read_csv(file_path)

# Page configuration
st.set_page_config(page_title="Reasons and Conditions", layout="wide")

# T√πy ch·ªânh CSS ƒë·ªÉ ƒë·∫©y Markdown s√°t tr√™n c√πng
st.markdown(
    """
    <style>
        .block-container {
            padding-top: 2rem; /* Lo·∫°i b·ªè kho·∫£ng c√°ch ph√≠a tr√™n */
        }
        h1 {
            text-align: center;
            margin-top: 0;
            padding-top: 0;
        }
    </style>
    """,
    unsafe_allow_html=True
)
st.markdown("<h3 style='text-align: center;'>Nguy√™n nh√¢n v√† ƒëi·ªÅu ki·ªán kh√°ch quan</h3>", unsafe_allow_html=True)

###########################################

st.sidebar.title("Control Panel")

# Nh·∫≠p gi
with st.sidebar.container():
    col1, col2 = st.sidebar.columns(2)
    from_hour_input = col1.selectbox("Gi·ªù b·∫Øt ƒë·∫ßu (24h)", options=range(0, 24))
    to_hour_input = col2.selectbox("Gi·ªù k·∫øt th√∫c (24h)", options=range(0, 24), index=23)

collision_input = st.sidebar.multiselect("H√¨nh th·ª©c va ch·∫°m", options=data['H√¨nh th·ª©c va ch·∫°m'].unique())
accident_type_input = st.sidebar.multiselect("Ph√¢n lo·∫°i tai n·∫°n", options=data['Ph√¢n lo·∫°i tai n·∫°n'].unique())

# Filtering function
def filter_df(df, from_hour_input, to_hour_input, collision_input, accident_type_input):
    df['Th·ªùi gian x·∫£y ra tai n·∫°n'] = pd.to_datetime(df['Th·ªùi gian x·∫£y ra tai n·∫°n'], errors='coerce')

    df['Hour'] = df['Th·ªùi gian x·∫£y ra tai n·∫°n'].dt.hour

    df_filtered = df[(df['Hour'] >= from_hour_input) & (df['Hour'] <= to_hour_input)]
    
    if collision_input:
        df_filtered = df_filtered[df_filtered['H√¨nh th·ª©c va ch·∫°m'].isin(collision_input)]

    if accident_type_input:
        df_filtered = df_filtered[df_filtered['Ph√¢n lo·∫°i tai n·∫°n'].isin(accident_type_input)]
    
    return df_filtered

# Apply the filtering based on user input from the sidebar
filtered_df = filter_df(data, from_hour_input, to_hour_input, collision_input, accident_type_input)

#############################################


with st.container():
    col1, col2, col3 = st.columns(3)

    number_of_unique_district = len(filtered_df['Qu·∫≠n/Huy·ªán'].unique())
    number_of_accident = filtered_df.shape[0]
    number_of_dead = filtered_df['S·ªë ng∆∞·ªùi ch·∫øt'].sum()

    col1.markdown(
        f"""
        <div style="
            background-color: #FF6363;
            border-radius: 10px;
            text-align: center;">
            <span>S·ªë Qu·∫≠n/Huy·ªán</span>
            <p style="font-size: 25px; font-weight: bold;">{number_of_unique_district}</p>
        </div>
        """,
        unsafe_allow_html=True
    )

    col2.markdown(
        f"""
        <div style="
            background-color: #FFB001;
            border-radius: 10px;
            text-align: center;">
            <span>S·ªë Ng∆∞·ªùi Ch·∫øt</span>
            <p style="font-size: 25px; font-weight: bold;">{number_of_dead}</p>
        </div>
        """,
        unsafe_allow_html=True
    )

    col3.markdown(
        f"""
        <div style="
            background-color: #FFB001;
            border-radius: 10px;
            text-align: center;">
            <span>S·ªë V·ª• Tai N·∫°n</span>
            <p style="font-size: 25px; font-weight: bold;">{number_of_accident}</p>
        </div>
        """,
        unsafe_allow_html=True
    )
    # col1.metric("S·ªë Qu·∫≠n/Huy·ªán", number_of_unique_district, border=True)
    # col2.metric("S·ªë ng∆∞·ªùi ch·∫øt", number_of_dead, border=True)
    # col3.metric("S·ªë ng∆∞·ªùi v·ª• tai n·∫°n", number_of_accident, border=True)

chart_col1, chart_col2 = st.columns(2)
with chart_col1.container():
    with st.container(border=True):
        # Prepare filtered_df for the pie chart
        weather_condition_counts = filtered_df['T√¨nh tr·∫°ng th·ªùi ti·∫øt'].value_counts().reset_index()
        weather_condition_counts.columns = ['T√¨nh tr·∫°ng th·ªùi ti·∫øt', 'S·ªë v·ª•']

        # Plot the pie chart using Plotly
        fig = px.pie(
            weather_condition_counts, 
            values='S·ªë v·ª•', 
            names='T√¨nh tr·∫°ng th·ªùi ti·∫øt', 
            title=' ',
            color_discrete_sequence=px.colors.sequential.Viridis  # Changed to Viridis for better contrast
        )

        # Customize labels and layout
        fig.update_traces(
            textinfo='percent+label', 
            pull=[0.1 if value < 0.05 * weather_condition_counts['S·ªë v·ª•'].sum() else 0 for value in weather_condition_counts['S·ªë v·ª•']],
            textfont_size=12  # Adjust font size for better readability
        )
        fig.update_layout(
            margin=dict(l=0, r=0, t=0, b=0),
            title_x=0.5,  # Center the title
            legend_title="T√¨nh tr·∫°ng th·ªùi ti·∫øt",
            # width=900,  # Adjusted width for better visualization
            height=300,  # Adjusted height for better visualization
            font=dict(size=10),  # Set default font size
            # autosize=True
        )


        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
        st.markdown("**üìä T·ª∑ l·ªá tai n·∫°n d·ª±a tr√™n t√¨nh tr·∫°ng th·ªùi ti·∫øt**")
        st.plotly_chart(fig, use_container_width=True)
    ############################################################
    with st.container(border=True):
        # Extract individual causes from the 'Nguy√™n nh√¢n v√† L·ªói vi ph·∫°m' column
        filtered_df['Nguy√™n nh√¢n'] = filtered_df['Nguy√™n nh√¢n v√† L·ªói vi ph·∫°m'].apply(
            lambda x: ast.literal_eval(x) if isinstance(x, str) else []
        )

        # Explode the list of causes into separate rows
        exploded_causes = filtered_df.explode('Nguy√™n nh√¢n')

        # Filter for accidents with at least one death
        fatal_accidents = exploded_causes[exploded_causes['S·ªë ng∆∞·ªùi ch·∫øt'] >= 1]

        # Count the top 10 individual causes
        cause_counts = fatal_accidents['Nguy√™n nh√¢n'].value_counts().head(10).reset_index()
        cause_counts.columns = ['Nguy√™n nh√¢n', 'S·ªë v·ª•']

        # Abbreviate the top causes as NV1, NV2, ..., and create a mapping for the legend
        cause_counts['Abbreviation'] = ['NV' + str(i + 1) for i in range(len(cause_counts))]

        # Plot the data with Plotly
        fig = px.bar(
            cause_counts, 
            x='Abbreviation', 
            y='S·ªë v·ª•', 
            text='S·ªë v·ª•',
            color='S·ªë v·ª•', 
            title=' ',
            color_continuous_scale='Viridis',
            labels={'Abbreviation': 'Nguy√™n nh√¢n (R√∫t g·ªçn)', 'S·ªë v·ª•': 'S·ªë v·ª•'}
        )

        # Add full cause descriptions as hover data
        fig.update_traces(
            hovertemplate="Nguy√™n nh√¢n: %{customdata[0]}<br>S·ªë v·ª•: %{y}",
            customdata=cause_counts[['Nguy√™n nh√¢n']].values
        )

        # Add annotations for the legend
        annotations_text = "<br>".join([f"{row['Abbreviation']}: {row['Nguy√™n nh√¢n']}" for _, row in cause_counts.iterrows()])
        fig.add_annotation(
            text=annotations_text,
            xref="paper", yref="paper",
            x=1, y=1,  # Position the legend to the right of the chart
            showarrow=False,
            align="left",
            font=dict(size=9),
            bgcolor="rgba(255, 255, 255, 0.8)",  # Add background color
            bordercolor="black",
            borderwidth=1.5
        )

        fig.update_traces(textposition='outside')
        # Customize layout
        fig.update_layout(
            margin=dict(l=0, r=0, t=0, b=0),
            title_x=0.5,  # Center the title
            xaxis_title='Nguy√™n nh√¢n (R√∫t g·ªçn)',
            yaxis_title='S·ªë v·ª•',
            font=dict(size=12),  # Set default font size
            legend_title="Nguy√™n nh√¢n",
            # width=1000,  # Adjust width to make room for annotations
            # height=600  # Adjust height
            height=300,
        )

        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
        st.markdown("**üìä Top 10 Nguy√™n nh√¢n g√¢y tai n·∫°n c√≥ ng∆∞·ªùi ch·∫øt**")
        st.plotly_chart(fig, use_container_width=True)

##########################################################
with chart_col2.container():
    with st.container(border=True):
        # ƒê·∫øm s·ªë v·ª• tai n·∫°n theo t·ª´ng lo·∫°i ƒë∆∞·ªùng v√† l·∫•y top 10
        road_type_accidents = filtered_df['Lo·∫°i ƒë∆∞·ªùng'].value_counts().head(10).reset_index()
        road_type_accidents.columns = ['Lo·∫°i ƒë∆∞·ªùng', 'S·ªë v·ª•']

        # S·∫Øp x·∫øp d·ªØ li·ªáu theo s·ªë v·ª• tai n·∫°n t·ª´ cao ƒë·∫øn th·∫•p
        road_type_accidents = road_type_accidents.sort_values(by='S·ªë v·ª•', ascending=True)

        # V·∫Ω bi·ªÉu ƒë·ªì Horizontal Bar Chart
        fig_road_type = px.bar(
            road_type_accidents,
            x='S·ªë v·ª•',
            y='Lo·∫°i ƒë∆∞·ªùng',
            orientation='h',  # Horizontal bar chart
            title=' ',
            labels={'S·ªë v·ª•': 'S·ªë v·ª• tai n·∫°n', 'Lo·∫°i ƒë∆∞·ªùng': 'Lo·∫°i ƒë∆∞·ªùng'},
            color='S·ªë v·ª•',
            color_continuous_scale='Plasma'  # Thang m√†u
        )

        # T√πy ch·ªânh hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
        fig_road_type.update_layout(
            margin=dict(l=0, r=0, t=0, b=0),
            title_x=0.5,  # CƒÉn gi·ªØa ti√™u ƒë·ªÅ
            xaxis_title='S·ªë v·ª• tai n·∫°n',
            yaxis_title='Lo·∫°i ƒë∆∞·ªùng',
            # width=900,  # ƒê·ªô r·ªông bi·ªÉu ƒë·ªì
            height=300,  # Chi·ªÅu cao bi·ªÉu ƒë·ªì
            font=dict(size=12)  # K√≠ch th∆∞·ªõc font ch·ªØ
        )

        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
        st.markdown("**üìä Top 10 lo·∫°i ƒë∆∞·ªùng c√≥ s·ªë v·ª• tai n·∫°n cao nh·∫•t**")
        st.plotly_chart(fig_road_type, use_container_width=True)
    ######################################################
    with st.container(border=True):

        # Chu·∫©n b·ªã d·ªØ li·ªáu
        # Lo·∫°i b·ªè c√°c h√†ng c√≥ gi√° tr·ªã thi·∫øu trong 'Nh√≥m PT1' v√† 'Qu·∫≠n/Huy·ªán'
        treemap_data = filtered_df.dropna(subset=['Nh√≥m PT1', 'Qu·∫≠n/Huy·ªán'])

        # ƒê·ªïi t√™n c·ªôt 'Nh√≥m PT1' th√†nh 'Lo·∫°i ph∆∞∆°ng ti·ªán' ƒë·ªÉ d·ªÖ ƒë·ªçc h∆°n
        treemap_data = treemap_data.rename(columns={'Nh√≥m PT1': 'Lo·∫°i ph∆∞∆°ng ti·ªán'})

        # ƒê·∫øm s·ªë v·ª• tai n·∫°n theo 'Lo·∫°i ph∆∞∆°ng ti·ªán' v√† 'Qu·∫≠n/Huy·ªán'
        treemap_summary = treemap_data.groupby(['Qu·∫≠n/Huy·ªán', 'Lo·∫°i ph∆∞∆°ng ti·ªán']).size().reset_index(name='S·ªë v·ª•')

        # V·∫Ω bi·ªÉu ƒë·ªì Treemap
        fig = px.treemap(
            treemap_summary,
            path=['Qu·∫≠n/Huy·ªán', 'Lo·∫°i ph∆∞∆°ng ti·ªán'],  # C·∫•p ƒë·ªô: Qu·∫≠n/Huy·ªán -> Lo·∫°i ph∆∞∆°ng ti·ªán
            values='S·ªë v·ª•',
            title=' ',
            color='S·ªë v·ª•',
            color_continuous_scale='Viridis',  # Thang m√†u
            labels={'S·ªë v·ª•': 'S·ªë v·ª• tai n·∫°n'}
        )

        # T√πy ch·ªânh hi·ªÉn th·ªã
        fig.update_layout(
            margin=dict(l=0, r=0, t=0, b=0),
            title_x=0.5,  # CƒÉn gi·ªØa ti√™u ƒë·ªÅ
            height=300,  # Chi·ªÅu cao bi·ªÉu ƒë·ªì
            # width=900,  # ƒê·ªô r·ªông bi·ªÉu ƒë·ªì
            font=dict(size=12)  # K√≠ch th∆∞·ªõc font ch·ªØ
        )

        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
        st.markdown("**üìä Ph√¢n t√≠ch tai n·∫°n theo lo·∫°i ph∆∞∆°ng ti·ªán v√† qu·∫≠n/huy·ªán**")
        st.plotly_chart(fig, use_container_width=True)